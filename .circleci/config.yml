version: 2.1

orbs:
  codecov: codecov/codecov@3.2.3

partials:
  main-env: &main-env
    DOTENV_DISABLE: true
    APP_DB_URI: mongodb://root:password@127.0.0.1:27017
    APP_SESSION_SECRET: localSecret
    APP_SMTP_HOST: mailhog
    APP_SMTP_PORT: 1025
    APP_STORAGE_ENDPOINT: localhost
    APP_STORAGE_PORT: 9000
    APP_STORAGE_SSL: false
    APP_STORAGE_ACCESS_KEY: 'AKIAIOSFODNN7EXAMPLE'
    APP_STORAGE_SECRET_KEY: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
    APP_STORAGE_PUBLIC_ENDPOINT: 'http://localhost:9000/app-public/'
    APP_HTML2PDF_ENDPOINT: 'http://html2pdf:3000/'
    APP_HEALTH_ENABLED: false
  minio-env: &mino-env
    MINIO_ROOT_USER: 'AKIAIOSFODNN7EXAMPLE'
    MINIO_ROOT_PASSWORD: 'wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY'
  mongo-env: &mongo-env
    MONGO_INITDB_ROOT_USERNAME: root
    MONGO_INITDB_ROOT_PASSWORD: password

executors:
  node-standalone:
    docker:
      - image: cimg/node:18.9.1
  node-with-dependencies:
    docker:
      - image: cimg/node:18.9.1
        environment: *main-env
      - image: mongo:6.0.1-focal
        environment: *mongo-env
      - image: minio/minio:RELEASE.2022-05-26T05-48-41Z
        entrypoint: sh
        command: -c 'mkdir -p /data/app && /opt/bin/minio server /data'
        environment: *mino-env
      - image: cimg/redis:7.0.4
        command: redis-server --appendonly yes
      - image: appvantage/html2pdf-service:1.7.2
        name: html2pdf
      - image: mailhog/mailhog:v1.0.1
        name: mailhog
  cypress-standalone:
    docker:
      - image: cypress/browsers:node18.6.0-chrome105-ff104
        environment: *main-env
  cypress:
    docker:
      - image: cypress/browsers:node18.6.0-chrome105-ff104
        environment: *main-env
      - image: mongo:6.0.1-focal
        environment: *mongo-env
      - image: minio/minio:RELEASE.2022-05-26T05-48-41Z
        entrypoint: sh
        command: -c 'mkdir -p /data/app && /opt/bin/minio server /data'
      - image: cimg/redis:7.0.4
        command: redis-server --appendonly yes
      - image: appvantage/html2pdf-service:1.7.2
        name: html2pdf
      - image: mailhog/mailhog:v1.0.1
        name: mailhog

jobs:
  deps-install:
    executor: node-standalone
    resource_class: medium
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn3-node18-cache-{{ checksum "yarn.lock" }}
            - yarn3-node18-cache
      - run:
          name: Install dependencies
          command: yarn install --immutable
      - save_cache:
          key: yarn3-node18-cache-{{ checksum "yarn.lock" }}
          paths:
            - ~/project/.yarn
      - persist_to_workspace:
          root: ~/project
          paths:
            - node_modules
            - .yarn

  validate-code:
    executor: node-standalone
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Lint source code
          command: yarn lint --format junit -o ./junit/js-lint-results.xml
      - run:
          name: Type checking
          command: yarn tsc
      - run:
          name: Type checking on cypress
          command: yarn tsc
          working_directory: ~/project/cypress
      - run:
          name: Lint commit messages
          command: yarn ts-node ./devtools/commands/lint-commits.ts
      - store_test_results:
          path: ~/project/junit/

  validate-unit-testing:
    executor: node-with-dependencies
    parallelism: 1
    resource_class: medium+
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Wait for db
          command: |
            ./devtools/wait-for-it.sh 127.0.0.1:27017 --timeout=60
            ./devtools/wait-for-it.sh 127.0.0.1:6379 --timeout=60
            ./devtools/wait-for-it.sh 127.0.0.1:9000 --timeout=60
            ./devtools/wait-for-it.sh mailhog:8025 --timeout=60
            ./devtools/wait-for-it.sh html2pdf:3000 --timeout=60
      - run:
          name: Unit testing
          # enable --split-by=timings after first runs
          command: |
            TEST_CMD=$(circleci tests glob "src/__tests__/api/**/*.ts" | circleci tests split)
            yarn test:coverage $TEST_CMD --reporters=default --reporters=jest-junit
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./junit/
      - store_test_results:
          path: ~/project/junit/
      - codecov/upload:
          flags: unit

  build:
    executor: node-standalone
    resource_class: medium+
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: yarn build
          environment:
            NODE_ENV: production
      - run:
          name: Prepare dependencies
          working_directory: ./build
          command: |
            cp -R ../.yarn ../.yarnrc.yml ../yarn.lock .
            yarn up --mode=skip-build
            yarn cache clean
            rm -rf ./node_modules
      - persist_to_workspace:
          root: ~/project
          paths:
            - build
      - store_artifacts:
          path: ~/project/report.html
          destination: report.html

  build-with-istanbul:
    executor: node-standalone
    resource_class: medium+
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: yarn build:istanbul
          environment:
            NODE_ENV: production
            BUILD_DIR: build-with-istanbul
      - persist_to_workspace:
          root: ~/project
          paths:
            - build-with-istanbul

  validate-component-testing:
    executor: cypress-standalone
    parallelism: 1
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install GPG
          command: |
            apt-get update
            apt-get install -y gnupg
      - run:
          name: Install Cypress
          command: yarn cypress install
      - run:
          name: Component testing
          environment:
            USE_ISTANBUL: "true"
          # enable --split-by=timings after first runs
          command: |
            TEST_FILES="$(circleci tests glob "cypress/component/**/*.cy.tsx" | circleci tests split)"
            yarn cypress:run \
              --browser chrome \
              --component \
              --reporter=junit \
              --reporter-options "mochaFile=junit/cypress-component-results.xml,toConsole=True" \
              --spec ${TEST_FILES//$'\n'/','}
      - store_test_results:
          path: ~/project/junit/
      - codecov/upload:
          flags: e2e
      - store_artifacts:
          path: ~/project/cypress/screenshots
          destination: cypress/screenshots
      - store_artifacts:
          path: ~/project/cypress/videos
          destination: cypress/videos

  validate-functional-testing:
    executor: cypress
    parallelism: 1
    resource_class: large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install GPG
          command: |
            apt-get update
            apt-get install -y gnupg
      - run:
          name: Install Cypress
          command: yarn cypress install
      - run:
          name: Wait for db
          command: |
            ./devtools/wait-for-it.sh 127.0.0.1:27017 --timeout=60
            ./devtools/wait-for-it.sh 127.0.0.1:6379 --timeout=60
            ./devtools/wait-for-it.sh 127.0.0.1:9000 --timeout=60
            ./devtools/wait-for-it.sh mailhog:8025 --timeout=60
            ./devtools/wait-for-it.sh html2pdf:3000 --timeout=60
      - run:
          name: Start server
          command: node server.js serve
          background: true
          working_directory: ~/project/build-with-istanbul
      - run:
          name: Start worker
          command: node server.js worker
          background: true
          working_directory: ~/project/build-with-istanbul
      - run:
          name: Wait for test server
          command: ./devtools/wait-for-it.sh 127.0.0.1:3000 --timeout=60
      - run:
          name: Functional testing
          command: |
            TEST_FILES="$(circleci tests glob "cypress/e2e/**/*.cy.ts" | circleci tests split)"
            yarn cypress:run \
              --browser chrome \
              --reporter=junit \
              --reporter-options "mochaFile=junit/cypress-e2e-results.xml,toConsole=True" \
              --spec ${TEST_FILES//$'\n'/','}
          environment:
            CYPRESS_BASE_URL: 'http://localhost:3000'
      - store_test_results:
          path: ~/project/junit/
      - codecov/upload:
          flags: component
      - store_artifacts:
          path: ~/project/cypress/screenshots
          destination: cypress/screenshots
      - store_artifacts:
          path: ~/project/cypress/videos
          destination: cypress/videos

  release:
    executor: node-standalone
    resource_class: medium
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: semantic-release
          command: yarn semantic-release

workflows:
  version: 2

  main:
    jobs:
      - deps-install
      - validate-code:
          requires:
            - deps-install
      - validate-unit-testing:
          requires:
            - deps-install
      - build:
          requires:
            - deps-install
      - build-with-istanbul:
          requires:
            - deps-install
      - validate-component-testing:
          requires:
            - deps-install
      - validate-functional-testing:
          requires:
            - build-with-istanbul
      - release:
          filters:
            branches:
              only:
                - /([0-9])+?.([0-9])+?.x/
                - next
                - latest
          requires:
            - validate-code
            - validate-unit-testing
            - validate-functional-testing
            - validate-component-testing
            - build
